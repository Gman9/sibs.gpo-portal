openapi: 3.0.1
info:
  title: Online Payment Gateway
  description: |-
    A GPO API (Gateway de Pagamentos Online) é um serviço prestado pela EMIS que permite aos comerciantes e fornecedores de software implementarem soluções que integram com os meios de pagamentos em Angola.
    # Getting Started
    Esta API comunica com o processador (EPMS) afim de permitir o processamento de transações, para isso existe um grupo de passos necessarios para iniciar a utilização desta API.
     ## 1 - Registar a aplicação
    O primeiro passo para usar esta API é registar a aplicação.
     Quando se regista a aplicação, é atribuido um grupo de perfil para a esta, ficando definido quais os processadores com que é permitido trabalhar
     ## 2 - Gerar um Access Token
     Após o registo da aplicação na API, é necessário gerar um access token que irá conceder permissões através do nosso endpoint.
     Para gerar o token, é necessário completar o formulario apresentado no POST /v1/token.
     Desta forma, quando existe uma chamada ao endpoint, é possivel perceber o que a aplicação está a fazer, que chamadas está a fazer e com que processador está a trabalhar.
     O token possui uma data de validade, quando esta data é ultrapassada é necessario gerar um novo token de acesso para usar com a API.
    ## 3 - Enviar o Token via Http
     Apenas com um token valido é possivel trabalhar com a API.
     Será necessário enviar o token em todos os pedidos afim de este ser usado, para isso o token deverá ser incluido nos http headers de cada pedido.
    ```html
        Authentication: Bearer <your-access-token>
    ```
  version: '1.5'
  x-logo:
    url: 'http://localhost:8080/online-payment-gateway/static/logo2.gif'
servers:
  - url: '{url}/online-payment-gateway/api'
    description: GPO Server
    variables:
      url:
        default: 'http://localhost:8080'
        description: Location of GPO API
tags:
  - name: Token
    description: Controllers responsible for handling token services.
  - name: Merchants
    description: Endpoints responsible for handling Merchants services.
  - name: Points of Sale
    description: Endpoints responsible for handling Points of Sale services.
  - name: Periods
    description: Endpoints responsible for handling Periods services.
  - name: Transactions
    description: Endpoints responsible for handling Transaction services.
  - name: Supervisors
    description: Endpoints responsible for handling Supervisor services.
paths:
  /v1/token:
    get:
      tags:
        - Token
      summary: Get Token Information.
      description: Get Token Information.
      operationId: getTokenInfo
      parameters:
        - name: accessToken
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving the token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        '404':
          description: Wrong credentials.
    post:
      tags:
        - Token
      summary: Creates or refreshes an access token.
      description: |-
        This service allows a client to create a new access token or refresh an existing access token. The token is required to communicate with the API.

        Depending on the client configuration the request for a new token may use one of the following grant_type options:
        - <strong>authorization_code</strong> - for clients that use GPO Sign-On
        - <strong>offline</strong> - for clients that request merchant authorization offline

        This service also allows to refresh an existing access token by using the grant_type <strong>refresh_token</strong>.
      operationId: createTokenInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantTokenImplementation'
      responses:
        '200':
          description: Success creating or refreshing an access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrantToken'
        '400':
          description: Bad Request.
        '404':
          description: Wrong credentials.
  '/v1/merchants/{merchantId}/establishments/{establishmentId}/supervisors':
    post:
      tags:
        - Supervisors
      summary: Creates an Establishment Supervisor.
      description: Creates an Establishment supervisor based on the provided body.
      operationId: createSupervisor
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: establishmentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Supervisor Object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supervisor'
      responses:
        '201':
          description: Success creating an establishment supervisor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supervisor'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '409':
          description: Provided identifier already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    get:
      tags:
        - Supervisors
      summary: Retrieves all Supervisor Data for the establishment.
      description: Retrieves all Supervisor Data for the establishment based on the provided parameters.
      operationId: getSupervisors
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: establishmentId
          in: path
          required: true
          schema:
            type: string
        - name: $skip
          in: query
          schema:
            type: string
            default: '0'
        - name: $top
          in: query
          schema:
            type: string
            default: '20'
        - name: $orderBy
          in: query
          schema:
            type: string
            x-notNull: '{api.queryParameters.orderby}'
        - name: $filter
          in: query
          schema:
            type: string
      responses:
        '201':
          description: Success retrieving establishment Supervisor Data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupervisorList'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  '/v1/merchants/{merchantId}/establishments/{establishmentId}/supervisors/{supervisorId}':
    get:
      tags:
        - Supervisors
      summary: Retrieves an Establishment Supervisor Data.
      description: Retrieves an Establishment supervisor based on the provided parameters.
      operationId: getSupervisorById
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: establishmentId
          in: path
          required: true
          schema:
            type: string
        - name: supervisorId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]+$'
      responses:
        '201':
          description: Success updating Establishment Supervisor Data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supervisor'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    delete:
      tags:
        - Supervisors
      summary: Delete an Establishment Supervisor Data.
      description: Delete an Establishment supervisor based on the provided body.
      operationId: deleteSupervisorById
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: establishmentId
          in: path
          required: true
          schema:
            type: string
        - name: supervisorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Success deleting an establishment supervisor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supervisor'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  '/v1/merchants/{merchantId}/establishments/{establishmentId}':
    get:
      tags:
        - Merchants
      summary: Retrieves a Merchant Establishment.
      description: Retrieves a Establishment based on the provided identifier.
      operationId: getEstablishmentById
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: establishmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving Establishment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Establishment'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/merchants/{merchantId}':
    get:
      tags:
        - Merchants
      summary: Retrieves a Merchant.
      description: Retrieves a Merchant based on the provided identifier.
      operationId: getMerchantById
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving Merchant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/merchants/{merchantId}/references':
    get:
      tags:
        - Merchants
      summary: Retrieves all References.
      description: Retrieves all References based on provided query parameters.
      operationId: getAllMerchantsRefs
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: $skip
          in: query
          schema:
            type: string
            default: '0'
        - name: $top
          in: query
          schema:
            type: string
            default: '20'
        - name: $orderBy
          in: query
          schema:
            type: string
            x-notNull: '{api.queryParameters.orderby}'
        - name: $filter
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving References.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  '/v1/merchants/{merchantId}/references/{referenceId}':
    get:
      tags:
        - Merchants
      summary: Retrieves a Reference.
      description: Retrieves a Reference based on the provided identifier.
      operationId: getMerchantRefById
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: referenceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving a Reference.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/merchants/{merchantId}/transactions':
    get:
      tags:
        - Merchants
      summary: Retrieves all Transactions.
      description: Retrieves all Transactions based on provided query parameters.
      operationId: getAllMercTransactions
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: $skip
          in: query
          schema:
            type: string
            default: '0'
        - name: $top
          in: query
          schema:
            type: string
            default: '20'
        - name: $orderBy
          in: query
          schema:
            type: string
            x-notNull: '{api.queryParameters.orderby}'
        - name: $filter
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving Transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  '/v1/merchants/{merchantId}/transactions/{transactionId}':
    get:
      tags:
        - Merchants
      summary: Retrieves a Transaction.
      description: Retrieves a Transaction based on the provided identifier.
      operationId: getTransactionById
      parameters:
        - name: merchantId
          in: path
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving a Transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/point-of-sale/{posId}':
    patch:
      tags:
        - Points of Sale
      summary: Updates a Point of Sale with additional information.
      description: This endpoint allows to add or change additional information of a Point Of Sale. Current version permits to name a point of sale to a more human readable option.
      operationId: patchPosById
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Patchable Pos Information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointOfSalePatch'
        required: true
      responses:
        '200':
          description: Point of Sale sucessfuly patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointOfSale'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided posId doesn't exist.
  '/v1/points-of-sale/{posId}':
    get:
      tags:
        - Points of Sale
      summary: Retrieves a Point of Sale.
      description: Retrieves a Point of Sale based on the provided identifier.
      operationId: getPosById
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving Point of Sale.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointOfSale'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/close':
    get:
      tags:
        - Points of Sale
      summary: Closes a point-of-sale.
      description: Conducts a close operation on the provided point of sale identifier.
      operationId: closePosById
      parameters:
        - name: posId
          in: path
          description: Terminal id
          required: true
          schema:
            type: string
        - name: supervisorCard
          in: query
          description: Deprecated, old plain supervisor card value
          schema:
            type: string
            deprecated: true
            minLength: 1
        - name: supervisorId
          description: Supervisor id, assigned upon Supervisor creation
          in: query
          schema:
            type: string
            minLength: 1
      responses:
        '201':
          description: Point of sale closed with success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  '/v1/points-of-sale/{posId}/open':
    get:
      tags:
        - Points of Sale
      summary: Opens a point-of-sale.
      description: Conducts an open operation on the provided point of sale identifier.
      operationId: openPosById
      parameters:
        - name: posId
          in: path
          description: Terminal id
          required: true
          schema:
            type: string
        - name: supervisorCard
          in: query
          description: Deprecated, old plain supervisor card value
          schema:
            type: string
            deprecated: true
            minLength: 1
        - name: supervisorId
          description: Supervisor id, assigned upon Supervisor creation
          in: query
          schema:
            type: string
            minLength: 1
      responses:
        '201':
          description: Point of sale opened with success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/periods':
    get:
      tags:
        - Periods
      summary: Retrieves a Period.
      description: Retrieves all Periods based on the provided query parameters.
      operationId: getPeriodsForPos
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
        - name: $skip
          in: query
          schema:
            type: string
            default: '0'
        - name: $top
          in: query
          schema:
            type: string
            default: '20'
        - name: $orderBy
          in: query
          schema:
            type: string
            x-notNull: '{api.queryParameters.orderby}'
        - name: $filter
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving Period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClearingPeriod'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/periods/{clearingPeriodNumber}':
    get:
      tags:
        - Periods
      summary: Retrieves a Clearing Period from a provided Point of Sale.
      description: Retrieves a Clearing Period based on the provided identifiers.
      operationId: getPosPeriodById
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
        - name: clearingPeriodNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving a Clearing Period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClearingPeriod'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/authorizations':
    post:
      tags:
        - Transactions
      summary: Create a authorization Transaction
      description: Create a authorization Transaction with the provided Pos Identifier
      operationId: createPosAuthorization
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Authorization Parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorization'
        required: true
      responses:
        '201':
          description: Creation of Authorization was successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Resource
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/authorizations/{authorizationId}/cancellations':
    post:
      tags:
        - Transactions
      summary: Creates a cancellation Transaction
      description: Creates a cancellation Transaction based on the provided identifier.
      operationId: createPosCancellation
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
        - name: authorizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Success creating a Cancellation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Resource
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/transactions':
    get:
      tags:
        - Transactions
      summary: Retrieves all Transactions.
      description: Retrieves all Transactions based on provided query parameters.
      operationId: getAllPosTransasctions
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
        - name: $skip
          in: query
          schema:
            type: string
            default: '0'
        - name: $top
          in: query
          schema:
            type: string
            default: '20'
        - name: $orderBy
          in: query
          schema:
            type: string
            x-notNull: '{api.queryParameters.oderby}'
        - name: $filter
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving Transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  '/v1/points-of-sale/{posId}/transactions/{transactionId}':
    get:
      tags:
        - Transactions
      summary: Retrieves a Transaction.
      description: Retrieves a Transaction based on the provided identifier.
      operationId: getPosTransactionById
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success retrieving a Transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OPGTransaction'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/authorizations/{authorizationId}/payments':
    post:
      tags:
        - Transactions
      summary: Creates a payment Transaction
      description: Creates a payment Transaction based on the provided identifier.
      operationId: createPosPayment
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
        - name: authorizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: AuthorizedPayment object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizedPayment'
        required: true
      responses:
        '201':
          description: Success creating a Payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Resource
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/authorizations/{authorizationId}/payments/{paymentId}/refunds':
    post:
      tags:
        - Transactions
      summary: Creates a refund Transaction
      description: Creates a refund Transaction based on the provided identifier.
      operationId: createPosPaymentRefund
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
        - name: authorizationId
          in: path
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Refund object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refund'
        required: true
      responses:
        '201':
          description: Success creating an App.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Resource
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/payments':
    post:
      tags:
        - Transactions
      summary: Create a Payment Transaction
      description: Create a Payment Transaction with the provided Pos Identifier
      operationId: createPosPurchase
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Payment Params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      responses:
        '201':
          description: Creation of Payment was successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Resource
        '404':
          description: Provided identifier doesn't exist.
  '/v1/points-of-sale/{posId}/payments/{paymentId}/refunds':
    post:
      tags:
        - Transactions
      summary: Creates a refund Transaction
      description: Creates a refund Transaction based on the provided identifier.
      operationId: createPosPurchaseRefund
      parameters:
        - name: posId
          in: path
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Refund object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refund'
        required: true
      responses:
        '201':
          description: Success creating an App.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Resource
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Provided identifier doesn't exist.
components:
  schemas:
    GrantToken:
      type: object
      properties:
        tokenType:
          type: string
          enum:
            - bearer
        access_token:
          type: string
          example: 3fb7aad0-f707-44e0-a123-caf08097a8bd"
        refresh_token:
          type: string
          example: gTFMN1cDBBcGYxlPt9RmxcM3nUYeOV0VFAbC6DWUs0OVHXLI4Z/tki/49An7jzSAJhr+asnV5f3B2uvEol8eAFsbztvsOoYCZ0ThHGGQgtZN6AYbobckeF0Y2eJzw8d6qcF7+sJOn7FiOGJsHQtIbNHufBcVRctCYNpKwzZWYRI=
        id_token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiRExfR1BPIiwiZXhwIjoxNjA0Njc2NTQ5LCJpYXQiOjE2MDI1ODU0NzQsInVzZXJJZCI6IjU4MzRlMzkxLTNmMzQtNDA2ZS1hYmE5LTIzNDE4YjI5OGJhYSIsImVtYWlsIjoiZGwtZ3BvQHNpYnMuY29tIn0.e8HlOjXSN0dbvO0VJqFlugyvEdHZRFItVRZLv5oGxrA
        expiresIn:
          type: integer
          format: int32
          example: 3600
    PointOfSalePatch:
      type: object
      properties:
        name:
          type: string
          example: Megastore Pos
          minLength: 1
          maxLength: 20
    PointOfSale:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
          readOnly: true
        id:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
          example: Megastore Pos
        status:
          type: string
          readOnly: true
          enum:
            - OPEN
            - CLOSE
        scenario:
          type: string
          enum:
            - MO_TO
            - ATTENDED
            - GENERIC
          readOnly: true
        clearingPeriod:
          $ref: '#/components/schemas/ClearingPeriodIdSchema'
        establishment:
          $ref: '#/components/schemas/EstablishmentReferenceSchema'
        supervisorId:
          type: string
          format: uuid
    Commission:
      type: object
      properties:
        commissioned:
          type: number
        transactions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        contracts:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Contract'
    MerchantIdSchema:
      type: object
      properties:
        id:
          type: string
          readOnly: true
      readOnly: true
    EstablishmentReferenceSchema:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        merchant:
          $ref: '#/components/schemas/MerchantIdSchema'
      readOnly: true
    ClearingPeriod:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        number:
          type: string
          readOnly: true
        transactions:
          type: number
          readOnly: true
        openDate:
          type: string
          format: date-time
          readOnly: true
        closeDate:
          type: string
          format: date-time
          readOnly: true
        references:
          type: number
          readOnly: true
        authorized:
          type: number
          readOnly: true
        cancelled:
          type: number
          readOnly: true
        payed:
          type: number
          readOnly: true
        refunded:
          type: number
          readOnly: true
        commission:
          $ref: '#/components/schemas/CommissionImplementation'
    OPGTransaction:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
        amount:
          type: number
          multipleOf: 0.01
          minimum: 0
          exclusiveMinimum: true
          maximum: 10000000000
          exclusiveMaximum: true
        clearingPeriod:
          type: string
        transactionNumber:
          type: string
        status:
          type: string
          enum:
            - ACCEPTED
            - REJECTED
        transactionType:
          type: string
          enum:
            - AUTHORIZATION
            - CANCELLATION
            - REFUND
            - PAYMENT
            - OPEN
            - CLOSE
            - CLEARANCE
        orderOrigin:
          type: string
          enum:
            - PRESENT
            - ECOMMERCE_CARD
            - ECOMMERCE_MOBILE
            - MOTO_MAIL
            - MOTO_FAX
            - MOTO_TELEPHONE
            - MOBILE
        issuerAuthorization:
          type: string
        currency:
          type: string
        pointOfSale:
          type: object
          properties:
            id:
              type: string
        reference:
          $ref: '#/components/schemas/Reference'
        merchantReferenceNumber:
          type: string
          description: References the merchant own order id.
          example: '201812060000001'
        parentTransaction:
          $ref: '#/components/schemas/OPGTransaction'
        errorCode:
          type: string
        errorType:
          type: string
        errorMessage:
          type: string
      readOnly: true
    Profile:
      type: object
      properties:
        authorized:
          type: boolean
        type:
          type: string
          enum:
            - EPMS
            - POSVAS
            - DUMMY
    Authorization:
      required:
        - amount
        - merchantReferenceNumber
        - orderOrigin
        - paymentInfo
      type: object
      properties:
        amount:
          multipleOf: 0.01
          type: number
          minimum: 0
          exclusiveMinimum: true
          maximum: 10000000000
          exclusiveMaximum: true
          x-notNull: '{api.payload.transactions.amount.message}'
          example: 9999.99
        orderOrigin:
          type: string
          x-notNull: '{api.payload.transactions.orderOrigin.message}'
          description: Order Origin refers the way that the merchant get the user payment method.
          default: MOBILE
          enum:
            - PRESENT
            - ECOMMERCE_CARD
            - ECOMMERCE_MOBILE
            - MOTO_MAIL
            - MOTO_FAX
            - MOTO_TELEPHONE
            - MOBILE
        currency:
          type: string
          description: Authorization currency
          example: AOA
        merchantReferenceNumber:
          type: string
          x-notNull: '{api.payload.transactions.merchantReferenceNumber.message}'
          maxLength: 15
          minLength: 1
          pattern: '^[a-zA-Z0-9]+$'
          description: References the merchant own order id.
          example: '201812060000001'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
    TransactionResponse:
      type: object
      properties:
        id:
          type: string
        errorType:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
    Merchant:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
          readOnly: true
        contacts:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        establishments:
          uniqueItems: true
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              active:
                type: boolean
              contacts:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        acquirerBank:
          type: string
        fiscalNumber:
          type: string
        id:
          type: string
    ClearingPeriodIdSchema:
      type: object
      properties:
        id:
          type: string
          readOnly: true
      readOnly: true
    AuthorizedPayment:
      required:
        - amount
      type: object
      properties:
        amount:
          multipleOf: 0.01
          type: number
          minimum: 0
          exclusiveMinimum: true
          maximum: 10000000000
          exclusiveMaximum: true
          x-notNull: '{api.payload.transactions.amount.message}'
          example: 9999.99
        currency:
          type: string
          description: Authorization currency
          example: AOA
    CommissionImplementation:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        commissioned:
          type: number
        contracts:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Contract'
        transactions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
      readOnly: true
    GenericError:
      type: object
      properties:
        type:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorBody'
    ErrorBody:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    ReferenceList:
      type: array
      items:
        $ref: '#/components/schemas/Reference'
    Reference:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          enum:
            - PENDING_PAYMENT
            - PARTIAL_PAYMENT
            - PAYED
            - PARTIAL_REFUND
            - CLOSED
        orderOrigin:
          type: string
          description: Order Origin refers the way that the merchant get the user payment method.
          default: MOBILE
          enum:
            - PRESENT
            - ECOMMERCE_CARD
            - ECOMMERCE_MOBILE
            - MOTO_MAIL
            - MOTO_FAX
            - MOTO_TELEPHONE
            - MOBILE
        authorized:
          type: number
        available:
          type: number
        refunded:
          type: number
        cancelled:
          type: number
        payed:
          type: number
        cancellable:
          type: boolean
        authorizable:
          type: boolean
        authorizations:
          type: integer
          format: int64
        payments:
          type: integer
          format: int64
        cancellations:
          type: integer
          format: int64
        refunds:
          type: integer
          format: int64
        id:
          type: string
        pointOfSale:
          $ref: '#/components/schemas/PointOfSale'
        paymentToken:
          $ref: '#/components/schemas/PaymentToken'
      readOnly: true
    PaymentInfo:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        card:
          $ref: '#/components/schemas/Card'
        mobile:
          $ref: '#/components/schemas/Mobile'
        token:
          $ref: '#/components/schemas/PaymentToken'
      description: 'Allows for multiple types of payments, although only one type will be allowed.'
      writeOnly: true
    SupervisorList:
      type: array
      items:
        $ref: '#/components/schemas/Supervisor'
    Supervisor:
      required:
        - supervisorType
        - supervisorValue
      type: object
      x-notNull: '{api.supervisor}'
      properties:
        supervisorType:
          type: string
          x-notNull: '{api.supervisor.supervisorType}'
          enum:
            - CARD
        supervisorValue:
          type: string
          x-notNull: '{api.supervisor.supervisorValue}'
          pattern: '^[a-zA-Z0-9]+$'
          maxLength: 37
          minLength: 1
        status:
          type: string
          enum:
            - UNKNOWN
            - VALID
            - INVALID
          readOnly: true
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        merchantId:
          type: string
          readOnly: true
        establishmentId:
          type: string
          readOnly: true
        supervisorId:
          type: string
          format: uuid
          readOnly: true
    Establishment:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
          readOnly: true
        pointsOfSale:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/VirtualPos'
        contacts:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        merchant:
          $ref: '#/components/schemas/Merchant'
        name:
          type: string
        id:
          type: string
    Mobile:
      type: object
      properties:
        phoneNumber:
          type: string
          x-notNull: '{api.payload.paymentInfo.mobile.message}'
          example: '199111111'
      writeOnly: true
    Card:
      required:
        - month
        - pan
        - year
      type: object
      properties:
        pan:
          maxLength: 19
          minLength: 11
          type: string
          x-notNull: '{api.payload.paymentInfo.card.pan.message}'
          example: '4573970047282374'
        year:
          minimum: 2
          maximum: 99
          type: integer
          format: int32
          x-notNull: '{api.payload.paymentInfo.card.year.message}'
          example: 21
        month:
          maximum: 12
          minimum: 1
          type: integer
          format: int32
          x-notNull: '{api.payload.paymentInfo.card.month.message}'
          example: 1
        cvv:
          type: string
          maxLength: 3
          example: '696'
      writeOnly: true
    Contact:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
          readOnly: true
        updatedDate:
          type: string
          format: date-time
          readOnly: true
        contact:
          type: string
        address:
          type: string
        name:
          type: string
    VirtualPos:
      type: object
      properties:
        status:
          type: string
          enum:
            - OPEN
            - CLOSE
        scenario:
          type: string
          enum:
            - MO_TO
            - ATTENDED
            - GENERIC
        active:
          type: boolean
        establishment:
          $ref: '#/components/schemas/Establishment'
        clearingPeriod:
          $ref: '#/components/schemas/ClearingPeriodInfo'
        id:
          type: string
    Payment:
      required:
        - amount
        - merchantReferenceNumber
        - orderOrigin
        - paymentInfo
      type: object
      properties:
        amount:
          multipleOf: 0.01
          type: number
          minimum: 0
          exclusiveMinimum: true
          maximum: 10000000000
          exclusiveMaximum: true
          x-notNull: '{api.payload.transactions.amount.message}'
          example: 9999.99
        orderOrigin:
          type: string
          x-notNull: '{api.payload.transactions.orderOrigin.message}'
          description: Order Origin refers the way that the merchant get the user payment method.
          default: MOBILE
          enum:
            - PRESENT
            - ECOMMERCE_CARD
            - ECOMMERCE_MOBILE
            - MOTO_MAIL
            - MOTO_FAX
            - MOTO_TELEPHONE
            - MOBILE
        currency:
          type: string
          description: Authorization currency
          example: AOA
        merchantReferenceNumber:
          type: string
          x-notNull: '{api.payload.transactions.merchantReferenceNumber.message}'
          maxLength: 15
          minLength: 1
          pattern: '^[a-zA-Z0-9]+$'
          description: References the merchant own order id.
          example: '201812060000001'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
    TransactionList:
      type: array
      items:
        $ref: '#/components/schemas/OPGTransaction'
    Transaction:
      type: object
      properties:
        id: 
          type: string
        total:
          type: integer
          format: int32
        description:
          type: string
        amount:
          type: number
          multipleOf: 0.01
          minimum: 0
          exclusiveMinimum: true
          maximum: 10000000000
          exclusiveMaximum: true
        type:
          type: string
          enum:
            - AUTHORIZATION
            - CANCELLATION
            - REFUND
            - PAYMENT
            - OPEN
            - CLOSE
    Refund:
      required:
        - amount
        - supervisorCard
      type: object
      properties:
        amount:
          multipleOf: 0.01
          type: number
          minimum: 0
          exclusiveMinimum: true
          maximum: 10000000000
          exclusiveMaximum: true
          x-notNull: '{api.payload.transactions.amount.message}'
          example: 9999.99
        currency:
          type: string
          description: Authorization currency
          example: AOA
        supervisorCard:
          type: string
          x-notNull: '{api.payload.pointsofsale.refunds.supervisorId.message}'
          writeOnly: true
          example: '961000001400010001'
    GrantTokenImplementation:
      required:
        - grant_type
        - client_id
        - client_secret
      type: object
      properties:
        grant_type:
          type: string
          writeOnly: true
          enum:
            - authorization_code
            - offline
            - refresh
          x-notNull: '{api.payload.token.grant_type}'
          example: authorization_code
        code:
          type: string
          writeOnly: true
          example: KoG8SZ6jKY9PooQGwnsUcg4cjMWydRQkfw/GNkFvsw8
        client_id:
          type: string
          writeOnly: true
          x-notNull: '{api.payload.token.client_id}'
          example: 9e7a492e-38df-41b6-b6bb-49c9ee401653
        client_secret:
          type: string
          writeOnly: true
          x-notNull: '{api.payload.token.client_secret}'
          example: wBAiHA5N/xQ6GlSMIu8mQWMomBWUWUxdwBJa2RIm/BM=
        user_email:
          type: string
          writeOnly: true
          example: merchant@mail.com
        refresh_token:
          type: string
          writeOnly: true
          example: gTFMN1cDBBcGYxlPt9RmxcM3nUYeOV0VFAbC6DWUs0OVHXLI4Z/tki/49An7jzSAJhr+asnV5f3B2uvEol8eAFsbztvsOoYCZ0ThHGGQgtZN6AYbobckeF0Y2eJzw8d6qcF7+sJOn7FiOGJsHQtIbNHufBcVRctCYNpKwzZWYRI=
    ClearingPeriodInfo:
      type: object
      properties:
        commission:
          $ref: '#/components/schemas/Commission'
        closeDate:
          type: string
          format: date-time
        openDate:
          type: string
          format: date-time
        number:
          type: string
    TokenInfo:
      type: object
      properties:
        processor:
          type: string
        active:
          type: boolean
        resources:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GrantedResource'
        expiredDate:
          type: string
          format: date-time
        profile:
          $ref: '#/components/schemas/Profile'
    GrantedResource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        active:
          type: boolean
        identifier:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
    Contract:
      type: object
      properties:
        description:
          type: string
        totalTransactions:
          type: integer
          format: int32
        amount:
          type: number
        commissioned:
          type: number
        positiveCommission:
          type: boolean
        positiveBalance:
          type: boolean
    PaymentToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 64241a6f-5123-45c1-bf2b-90ab39c6c85a
      description: Optional token for subsequents authorizations.
      writeOnly: true
  securitySchemes:
    BearerAuth:
      type: http
      description: OAuth Bearer Token
      scheme: bearer
security:
  - BearerAuth: []
